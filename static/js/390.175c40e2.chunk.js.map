{"version":3,"file":"static/js/390.175c40e2.chunk.js","mappings":"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","sources":["hooks/useScriptRef.js","ui-component/extended/AnimateButton.js","views/pages/authentication/AuthWrapper1.js","views/pages/authentication/auth-forms/AuthCreate.js","views/pages/authentication/authentication/CreatePassword.js"],"sourcesContent":["import { useEffect, useRef } from 'react';\n\n// ==============================|| ELEMENT REFERENCE HOOKS  ||============================== //\n\nconst useScriptRef = () => {\n    const scripted = useRef(true);\n\n    useEffect(\n        () => () => {\n            scripted.current = false;\n        },\n        []\n    );\n\n    return scripted;\n};\n\nexport default useScriptRef;\n","import PropTypes from 'prop-types';\nimport { forwardRef } from 'react';\n// third-party\nimport { motion, useCycle } from 'framer-motion';\n\n// ==============================|| ANIMATION BUTTON ||============================== //\n\nconst AnimateButton = forwardRef(({ children, type, direction, offset, scale }, ref) => {\n    let offset1;\n    let offset2;\n    switch (direction) {\n        case 'up':\n        case 'left':\n            offset1 = offset;\n            offset2 = 0;\n            break;\n        case 'right':\n        case 'down':\n        default:\n            offset1 = 0;\n            offset2 = offset;\n            break;\n    }\n\n    const [x, cycleX] = useCycle(offset1, offset2);\n    const [y, cycleY] = useCycle(offset1, offset2);\n\n    switch (type) {\n        case 'rotate':\n            return (\n                <motion.div\n                    ref={ref}\n                    animate={{ rotate: 360 }}\n                    transition={{\n                        repeat: Infinity,\n                        repeatType: 'loop',\n                        duration: 2,\n                        repeatDelay: 0\n                    }}\n                >\n                    {children}\n                </motion.div>\n            );\n        case 'slide':\n            if (direction === 'up' || direction === 'down') {\n                return (\n                    <motion.div\n                        ref={ref}\n                        animate={{ y: y !== undefined ? y : '' }}\n                        onHoverEnd={() => cycleY()}\n                        onHoverStart={() => cycleY()}\n                    >\n                        {children}\n                    </motion.div>\n                );\n            }\n            return (\n                <motion.div ref={ref} animate={{ x: x !== undefined ? x : '' }} onHoverEnd={() => cycleX()} onHoverStart={() => cycleX()}>\n                    {children}\n                </motion.div>\n            );\n\n        case 'scale':\n        default:\n            if (typeof scale === 'number') {\n                scale = {\n                    hover: scale,\n                    tap: scale\n                };\n            }\n            return (\n                <motion.div ref={ref} whileHover={{ scale: scale?.hover }} whileTap={{ scale: scale?.tap }}>\n                    {children}\n                </motion.div>\n            );\n    }\n});\n\nAnimateButton.propTypes = {\n    children: PropTypes.node,\n    offset: PropTypes.number,\n    type: PropTypes.oneOf(['slide', 'scale', 'rotate']),\n    direction: PropTypes.oneOf(['up', 'down', 'left', 'right']),\n    scale: PropTypes.oneOfType([PropTypes.number, PropTypes.object])\n};\n\nAnimateButton.defaultProps = {\n    type: 'scale',\n    offset: 10,\n    direction: 'right',\n    scale: {\n        hover: 1,\n        tap: 0.9\n    }\n};\n\nexport default AnimateButton;\n","/* eslint-disable no-unused-vars */\n// material-ui\nimport { styled } from '@mui/material/styles';\n\nimport BackgroundImage from 'assets/images/login-screen.jpg';\n\nconst AuthWrapper1 = styled('div')(({}) => ({\n    backgroundImage: `url(${BackgroundImage})`,\n    minHeight: '100vh',\n    width: '100%',\n    backgroundPosition: 'center',\n    backgroundSize: 'cover'\n}));\n\nexport default AuthWrapper1;\n","/* eslint-disable no-unused-vars */\nimport React from 'react';\nimport { useState } from 'react';\nimport { Link as RouterLink, useNavigate, useParams } from 'react-router-dom';\nimport { useTheme } from '@mui/material/styles';\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\nimport {\n    Box,\n    Button,\n    FormControl,\n    FormHelperText,\n    Grid,\n    IconButton,\n    InputAdornment,\n    InputLabel,\n    OutlinedInput,\n    Typography\n} from '@mui/material';\nimport Visibility from '@mui/icons-material/Visibility';\nimport VisibilityOff from '@mui/icons-material/VisibilityOff';\n\nimport useScriptRef from 'hooks/useScriptRef';\nimport AnimateButton from 'ui-component/extended/AnimateButton';\nimport jwt_decode from 'jwt-decode';\nimport { stringify } from 'json5';\nimport { updatePass } from 'services/apis/server';\n\nconst LoginPage = React.forwardRef((props, ref) => <RouterLink ref={ref} to=\"/auth/login\" {...props} role={undefined} />);\n\nconst CreatePassword = ({ ...others }) => {\n    const theme = useTheme();\n    const scriptedRef = useScriptRef();\n    const navigate = useNavigate();\n\n    const [showPassword, setShowPassword] = useState(false);\n    const handleClickShowPassword = () => {\n        setShowPassword(!showPassword);\n    };\n\n    const handleMouseDownPassword = (event) => {\n        event.preventDefault();\n    };\n\n    const token = useParams();\n    console.log('sdfasdfa', stringify(token.token));\n    const decoded = jwt_decode(token.token);\n    console.log(decoded);\n\n    const onUpdatepassword = async (values) => {\n        const data = await updatePass({\n            email: decoded.email,\n            password: values.password\n        });\n        console.log(data);\n        navigate('/auth/login');\n    };\n\n    return (\n        <>\n            <Grid container direction=\"column\" justifyContent=\"center\" spacing={2}>\n                <Grid item xs={12} container alignItems=\"left\" justifyContent=\"left\">\n                    <Box sx={{ mb: 2 }}>\n                        <Typography\n                            color=\"#FFFFFF\"\n                            fontFamily=\"Inter\"\n                            fontStyle=\"normal\"\n                            fontWeight=\"400\"\n                            fontSize=\"21px\"\n                            lineHeight=\"40px\"\n                            marginBottom=\"52px\"\n                        >\n                            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nec nisl, eget integer nunc duis facilisi mauris urna,\n                            sagittis.\n                        </Typography>\n                    </Box>\n                </Grid>\n            </Grid>\n\n            <Formik\n                initialValues={{\n                    submit: null\n                }}\n                validationSchema={Yup.object().shape({\n                    password: Yup.string().max(255).required('Password is required'),\n                    confirm: Yup.string()\n                        .when('password', {\n                            is: (val) => (val && val.length > 0 ? true : false),\n                            then: Yup.string().oneOf([Yup.ref('password')], 'Both password need to be the same')\n                        })\n                        .max(255)\n                        .required('Confirm is required')\n                })}\n                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\n                    try {\n                        if (scriptedRef.current) {\n                            setStatus({ success: true });\n                            setSubmitting(false);\n                        }\n                    } catch (err) {\n                        console.error(err);\n                        if (scriptedRef.current) {\n                            setStatus({ success: false });\n                            setErrors({ submit: err.message });\n                            setSubmitting(false);\n                        }\n                    }\n                }}\n            >\n                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\n                    <form noValidate onSubmit={handleSubmit} {...others}>\n                        <FormControl\n                            fullWidth\n                            error={Boolean(touched.password && errors.password)}\n                            sx={{ ...theme.typography.customInput, marginBottom: '45px' }}\n                        >\n                            <InputLabel htmlFor=\"outlined-adornment-password-login\">New Password</InputLabel>\n                            <OutlinedInput\n                                id=\"outlined-adornment-password-login\"\n                                type={showPassword ? 'text' : 'password'}\n                                value={values.password}\n                                name=\"password\"\n                                onBlur={handleBlur}\n                                onChange={handleChange}\n                                endAdornment={\n                                    <InputAdornment position=\"end\">\n                                        <IconButton\n                                            aria-label=\"toggle password visibility\"\n                                            onClick={handleClickShowPassword}\n                                            onMouseDown={handleMouseDownPassword}\n                                            edge=\"end\"\n                                            size=\"large\"\n                                        >\n                                            {showPassword ? <Visibility /> : <VisibilityOff />}\n                                        </IconButton>\n                                    </InputAdornment>\n                                }\n                                label=\"Password\"\n                                inputProps={{}}\n                            />\n                            {touched.password && errors.password && (\n                                <FormHelperText error id=\"standard-weight-helper-text-password-login\">\n                                    {errors.password}\n                                </FormHelperText>\n                            )}\n                        </FormControl>\n                        <FormControl\n                            fullWidth\n                            error={Boolean(touched.confirm && errors.confirm && values.password != values.confirm)}\n                            sx={{ ...theme.typography.customInput, marginBottom: '51px' }}\n                        >\n                            <InputLabel htmlFor=\"outlined-adornment-password-login\">Confirm Password</InputLabel>\n                            <OutlinedInput\n                                id=\"outlined-adornment-confirm-password-login\"\n                                type={showPassword ? 'text' : 'password'}\n                                value={values.confirm}\n                                name=\"confirm\"\n                                onBlur={handleBlur}\n                                onChange={handleChange}\n                                label=\"Password\"\n                                inputProps={{}}\n                            />\n                            {touched.confirm && errors.confirm && values.password != values.confirm && (\n                                <FormHelperText error id=\"standard-weight-helper-text-password-login\">\n                                    {errors.confirm}\n                                </FormHelperText>\n                            )}\n                        </FormControl>\n                        {errors.submit && (\n                            <Box sx={{ mt: 3 }}>\n                                <FormHelperText error>{errors.submit}</FormHelperText>\n                            </Box>\n                        )}\n\n                        <Box sx={{ mt: 2 }}>\n                            <AnimateButton>\n                                <Button\n                                    // component={LoginPage}\n                                    // to=\"/auth/login\"\n                                    disableElevation\n                                    // disabled={isSubmitting}\n                                    fullWidth\n                                    size=\"large\"\n                                    type=\"submit\"\n                                    variant=\"contained\"\n                                    onClick={() => onUpdatepassword(values)}\n                                    sx={{\n                                        backgroundColor: '#FF0676',\n                                        borderRadius: '18px',\n                                        height: '90px',\n                                        fontFamily: 'Inter',\n                                        fontStyle: 'normal',\n                                        fontWeight: '700',\n                                        fontSize: '27px',\n                                        lineHeight: '34px'\n                                    }}\n                                >\n                                    Submit Now\n                                </Button>\n                            </AnimateButton>\n                        </Box>\n                    </form>\n                )}\n            </Formik>\n        </>\n    );\n};\n\nexport default CreatePassword;\n","/* eslint-disable no-unused-vars */\nimport { useTheme } from '@mui/material/styles';\nimport { Grid, Stack, Typography, useMediaQuery } from '@mui/material';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\n\nimport AuthWrapper1 from '../AuthWrapper1';\nimport CreatePassword from '../auth-forms/AuthCreate';\n\nconst Login = () => {\n    const theme = useTheme();\n    const matchDownSM = useMediaQuery(theme.breakpoints.down('md'));\n\n    return (\n        <AuthWrapper1>\n            <PerfectScrollbar\n                component=\"div\"\n                style={{\n                    height: '100vh'\n                }}\n            >\n                <Grid container direction=\"row\" justifyContent=\"left\" alignItems=\"center\" sx={{ minHeight: '100vh' }}>\n                    <Grid item xs={12} md={12} sm={12} lg={7}>\n                        <Grid\n                            container\n                            sx={{\n                                width: '100%',\n                                marginLeft: 'auto',\n                                maxWidth: '1320px',\n                                height: '100vh',\n                                alignItems: 'center',\n                                justifyContent: 'center'\n                            }}\n                        >\n                            <Grid\n                                item\n                                xs={12}\n                                md={12}\n                                sm={12}\n                                lg={12}\n                                sx={{\n                                    marginLeft: '166px',\n                                    marginRight: '283px'\n                                }}\n                            >\n                                <Grid container alignItems=\"left\" justifyContent=\"left\">\n                                    <Grid item xs={12}>\n                                        <Grid\n                                            container\n                                            direction={matchDownSM ? 'column-reverse' : 'row'}\n                                            alignItems=\"left\"\n                                            justifyContent=\"left\"\n                                        >\n                                            <Grid item>\n                                                <Stack alignItems=\"left\" justifyContent=\"left\" spacing={1}>\n                                                    <Typography\n                                                        color=\"#FFFFFF\"\n                                                        gutterBottom\n                                                        fontSize={matchDownSM ? '50px' : '70px'}\n                                                        fontWeight=\"700\"\n                                                        fontStyle=\"normal\"\n                                                        fontFamily=\"Inter\"\n                                                        lineHeight=\"85px\"\n                                                        marginBottom=\"24px\"\n                                                        width=\"752px\"\n                                                    >\n                                                        Create New Password\n                                                    </Typography>\n                                                </Stack>\n                                            </Grid>\n                                        </Grid>\n                                    </Grid>\n                                    <Grid item xs={12}>\n                                        <CreatePassword />\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </PerfectScrollbar>\n        </AuthWrapper1>\n    );\n};\n\nexport default Login;\n"],"names":["scripted","useRef","useEffect","current","AnimateButton","forwardRef","ref","offset1","offset2","children","type","direction","offset","scale","x","cycleX","useCycle","y","cycleY","animate","rotate","transition","repeat","Infinity","repeatType","duration","repeatDelay","undefined","onHoverEnd","onHoverStart","hover","tap","whileHover","whileTap","defaultProps","styled","backgroundImage","BackgroundImage","minHeight","width","backgroundPosition","backgroundSize","others","theme","useTheme","scriptedRef","useScriptRef","navigate","useNavigate","showPassword","setShowPassword","useState","handleClickShowPassword","handleMouseDownPassword","event","preventDefault","token","useParams","console","log","stringify","decoded","jwt_decode","Grid","container","justifyContent","spacing","item","xs","alignItems","Box","sx","mb","Typography","color","fontFamily","fontStyle","fontWeight","fontSize","lineHeight","marginBottom","initialValues","submit","validationSchema","Yup","shape","password","max","required","confirm","when","is","val","length","then","oneOf","onSubmit","async","values","setErrors","setStatus","setSubmitting","success","err","error","message","errors","handleBlur","handleChange","handleSubmit","isSubmitting","touched","noValidate","FormControl","fullWidth","Boolean","typography","customInput","InputLabel","htmlFor","OutlinedInput","id","value","name","onBlur","onChange","endAdornment","InputAdornment","position","IconButton","onClick","onMouseDown","edge","size","Visibility","VisibilityOff","label","inputProps","FormHelperText","mt","Button","disableElevation","variant","data","updatePass","email","onUpdatepassword","backgroundColor","borderRadius","height","matchDownSM","useMediaQuery","breakpoints","down","AuthWrapper1","component","style","md","sm","lg","marginLeft","maxWidth","marginRight","Stack","gutterBottom"],"sourceRoot":""}